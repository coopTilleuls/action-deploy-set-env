name: "coopTilleuls/action-deploy-set-env"
description: "provides all variables for other steps"
inputs:
  SITE_NAME:
    description: "short site name for namspace/db suffix"
    required: true
  SECRETS_JSON:
    required: true

outputs:
  CLUSTER:
    description: "Kubernetes cluster"
    value: ${{ steps.main.outputs.CLUSTER }}
  IMAGE_TAG:
    description: "Docker image tag"
    value: ${{ steps.main.outputs.IMAGE_TAG }}
  NAMESPACE:
    description: "Kubernetes namespace"
    value: ${{ steps.main.outputs.NAMESPACE }}
  PREFIX_NAME:
    description: "release/db prefix"
    value: ${{ steps.main.outputs.PREFIX_NAME }}
  HELM_VALUES_ARG:
    description: "helm values argument to pass to helm command"
    value: ${{ steps.main.outputs.HELM_VALUES_ARG }}
  DB_USER:
    description: "database username"
    value: ${{ steps.main.outputs.DB_USER }}
  DB_NAME:
    description: "database name"
    value: ${{ steps.main.outputs.DB_NAME }}
  PULL_REQUEST_MESSAGE:
    description: "message to post in pull request after deployment"
    value: ${{ steps.main.outputs.PULL_REQUEST_MESSAGE }}
  VERCEL_ARGS:
    description: "arguments for vercel deployment"
    value: ${{ steps.main.outputs.VERCEL_ARGS }}
  DUMP_SUBSTITUTIONS:
    description: "json array of search/replacement to apply before inserting dump (or inverted during dump)"
    value: ${{ steps.main.outputs.DUMP_SUBSTITUTIONS }}

runs:
  using: "composite"
  steps:
    - shell: bash
      id: main
      run: |
        set -ex

        function get_input() {
          local key=$1
          jq -r ".$key // empty" <<EOF
          ${{ inputs.SECRETS_JSON }}
        EOF
        }

        # set prefix name
        if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
          PREFIX_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PREFIX_NAME_UC=PR_$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH" | tr a-z A-Z)
          VERCEL_PREFIX_NAME="$GITHUB_HEAD_REF"
        else
          PREFIX_NAME=$(echo $GITHUB_REF | cut -d / -f 3 | sed -e 's/_/-/g')
          PREFIX_NAME_UC=$(echo $GITHUB_REF | cut -d / -f 3 | sed -e 's/-/_/g' | tr a-z A-Z)
          VERCEL_PREFIX_NAME="$PREFIX_NAME"
        fi
        echo "::set-output name=PREFIX_NAME::$PREFIX_NAME"

        # set image tag
        IMAGE_TAG=$(echo sha-${GITHUB_SHA::7})
        echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"

        # get cluster credential
        if [ "$PREFIX_NAME" == "main" -o "$PREFIX_NAME" == "prod" ]; then
          CLUSTER=prod
        else
          CLUSTER=nonprod
        fi
        echo "::set-output name=CLUSTER::$CLUSTER"
        CLUSTER_UC=$(echo $CLUSTER | tr a-z A-Z)

        # short site name
        SITE_NAME=${{ inputs.SITE_NAME }}

        # set namespace
        NAMESPACE=$(echo "$CLUSTER-$SITE_NAME" | sed -e 's|/$||' -e 's|/|-|g' | tr A-Z a-z)
        echo "::set-output name=NAMESPACE::$NAMESPACE"

        # set db_user and db_name
        DB_USER=$(echo "$PREFIX_NAME-$SITE_NAME" | sed -e 's|/$||' -e 's|[/-]|_|g' | tr A-Z a-z)
        echo "::set-output name=DB_USER::$DB_USER"
        DB_NAME=$(echo "$PREFIX_NAME-$SITE_NAME" | sed -e 's|/$||' -e 's|[/-]|_|g' | tr A-Z a-z)
        echo "::set-output name=DB_NAME::$DB_NAME"

        # Set image repo/tag
        # image registry
        IMAGE_REPOSITORY=$(get_input IMAGE_REPOSITORY)

        sed -i -e "s#IMAGE_TAG#$IMAGE_TAG#g"               helm/chart/values*.yaml
        sed -i -e "s#IMAGE_REPOSITORY#$IMAGE_REPOSITORY#g" helm/chart/values*.yaml
        sed -i -e "s#PREFIX_NAME#$PREFIX_NAME#g"           helm/chart/values*.yaml
        sed -i -e "s#DB_USER#$DB_USER#g"                   helm/chart/values*.yaml
        sed -i -e "s#DB_NAME#$DB_NAME#g"                   helm/chart/values*.yaml
        cat helm/chart/values*.yaml

        # End of helm values
        echo "::set-output name=HELM_VALUES_ARG::$HELM_VALUES_ARG"

        # Pull request message
        PULL_REQUEST_MESSAGE="To access site: FIXME"
        echo "::set-output name=PULL_REQUEST_MESSAGE::$PULL_REQUEST_MESSAGE"
